package com.dating.reveal.network;import android.os.AsyncTask;import android.os.Build;import com.dating.reveal.main.Const;import com.dating.reveal.net.util.ResultCallBack;import com.dating.reveal.utility.AndroidUtils;import com.dating.reveal.utility.DataUtils;import java.util.HashMap;import java.util.List;import java.util.concurrent.RejectedExecutionException;public class ServerManager {	public final static String COMMAND_GET_COUNTRYLIST_ACTION = "getcountrylist";	public final static String COMMAND_GET_USERINFO_ACTION = "getuserinfo";	public final static String COMMAND_GET_STATICLIST_ACTION = "getstaticlist";	private static void sendRqeust(HashMap<String, String> params, String command,								   ResultCallBack callBack) {		ServerTask task = new ServerTask(command, callBack, params);		if (AndroidUtils.getAPILevel() > 12) {			//task.executeOnExecutor(AsyncTask.SERIAL_EXECUTOR, "");			task.execute("");		} else {			task.execute("");		}	}    // send voice chating data//	public static  void uploadFile(String path, ResultCallBack callBack) {//		HashMap<String, String> map = new HashMap<String, String>();////		map.put("token",DataUtils.getPreference(Const.TOKEN,""));//		map.put("userno",DataUtils.getPreference(Const.ID,""));//		map.put("myfile", path);////		UpLoadFileTask task = new UpLoadFileTask(ServerTask.CHAT_UPLOAD_AUDIO, map, null,"recording", callBack);//		try {//			 if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {//HONEYCOMB//				task.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, path);//			} else {//				task.execute(path);//			}//		} catch (RejectedExecutionException e) {//			// This shouldn't happen, but might.//		}//	}	public static  void uploadFile(String path, ResultCallBack callBack) {		HashMap<String, String> map = new HashMap<String, String>();//		map.put("token",DataUtils.getPreference(Const.TOKEN,""));		map.put("facebookid",DataUtils.getPreference(Const.FACEBOOKID,""));		map.put("myfile", path);		map.put("name", DataUtils.getPreference(Const.NAME,""));		UpLoadFileTask task = new UpLoadFileTask(ServerTask.UPLOAD_URL, map, null,"uploadphoto", callBack);		try {			if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {//HONEYCOMB				task.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, path);			} else {				task.execute(path);			}		} catch (RejectedExecutionException e) {			// This shouldn't happen, but might.		}	}	private static void sendRqeust(List<HashMap<String, String>> paramsList, List<String> commandList,								   ResultCallBack callBack) {		ServerTask task = new ServerTask(commandList, callBack, paramsList);		if (AndroidUtils.getAPILevel() > 12) {			//task.executeOnExecutor(AsyncTask.SERIAL_EXECUTOR, "");			task.execute("");		} else {			task.execute("");		}	}	private static void sendRqeustToOtherService(String url, HashMap<String, String> params, ResultCallBack callBack) {		WebServiceTask task = new WebServiceTask(url, callBack, params);		task.execute("");	}	public static void register(String email, String password, String username, String pushkey, ResultCallBack callback)	{		HashMap<String, String> map = new HashMap<String, String>();		map.put("email", email);		map.put("pwd", password);		map.put("username",username);		sendRqeust(map, "register", callback);	}    public static void uploadLocation(String userNO, String countryName, String areaLevelName,									  double Latitude, double Longitude, String token, String pushkey, ResultCallBack callback){		HashMap<String,String> map = new HashMap<String, String>();		map.put("userno",userNO);		map.put("countryname", countryName);		map.put("area_level_name",areaLevelName);			String lati = String.valueOf(Latitude);		map.put("latitude",lati);			String longi = String.valueOf(Longitude);		map.put("longitude",longi);		map.put("token",token);		sendRqeust(map, "addcoordinate", callback);	}	public static void downloadLocationHistory(ResultCallBack callback) {		HashMap<String ,String > map = new HashMap<String ,String >();		map.put("userno",DataUtils.getPreference(Const.ID,""));		map.put("token",DataUtils.getPreference(Const.TOKEN,""));		map.put("pagenum","0");		sendRqeust(map,"getcoordinate",callback);	}//        ServerManager.login(facebookid, email, gender, name, age,locationxx, locationyy, new ResultCallBack(){//var facebookid=req.body.facebookid;//    var email = req.body.email;//    var age = req.body.age;//    var name =req.body.name;//    var gender =req.body.gender;//    var locationx=req.body.locationx;//    var locationy=req.body.locationy;//    var othergender= req.body.othergender;	public static void login(String facebookid, String email, String gender, String name, String age, String locationx, String locationy, ResultCallBack callback)	{		HashMap<String, String> map = new HashMap<String, String>();		map.put("email", email);		map.put("facebookid", facebookid);		map.put("age",age);		map.put("name", name);		map.put("device", "android");		map.put("gender", gender);		map.put("locationx", locationx);		map.put("locationy", locationy);		sendRqeust(map, "login", callback);	}	//ServerManager.sendRatingResult(sendfacebookid, facebookid, photopath, rat, re, response, new ResultCallBack(){})//	var sendfacebookid = req.body.myfacebookid;//	var photopath      = req.body.photopath;//	var facebookid     =req.body.facebookid;//	var rating         = parseInt(req.body.rating);//	var report         = req.body.report;//    var responsematchrequest = req.body.responsematchrequest;	public static void sendRatingResult(String sendfacebookid, String facebookid, String photopath,										String rat, String re, String response, String myname, String ratename, ResultCallBack callBack){		HashMap<String, String> map = new HashMap<String, String>();		map.put("myfacebookid", sendfacebookid);		map.put("facebookid", facebookid);		map.put("photopath", photopath);		map.put("rating", rat);		map.put("report", re);		map.put("responsematchrequest", response);		map.put("sender_name",myname);		map.put("name1", ratename);		sendRqeust(map, "rated", callBack);	}	//ServerManager.singlePhoto(face, path, );	//     var photopath      = req.body.photopath;	//     var facebookid     =req.body.facebookid;	public static void singlePhoto(String facebookid, String photopath, ResultCallBack callBack){		HashMap<String, String> map = new HashMap<String, String>();		map.put("facebookid", facebookid);		map.put("photopath", photopath);		sendRqeust(map, "photoinfo", callBack);	}	//        ServerManager.sendCommentLike(comment, facebookid, photopath,myfacebookid,like, );//	var facebookid      =req.body.facebookid;//	var sendfacebookid  = req.body.sendfacebookid;//	var photopath       = req.body.photopath;//	var like            = req.body.like;//	var comment         = req.body.comment;	public static void sendCommentLike(String comment, String facebookid, String photopath,String myfacebookid,									   String like,String sendname, ResultCallBack callBack){		HashMap<String, String> map = new HashMap<String, String>();		map.put("facebookid", facebookid);		map.put("photopath", photopath);		map.put("sendfacebookid",myfacebookid);		map.put("like", like);		map.put("comment",comment);		map.put("sendname", sendname);		sendRqeust(map, "commentlike", callBack);	}//         ServerManager.getFriendProfile(facebookid, myfacebookid,);//	var facebookid = req.body.facebookid;//	var sendfacebookid = req.body.sendfacebookid;	public static void getFriendProfile(String facebookid, String myfacebookid, ResultCallBack callBack){		HashMap<String, String> map = new HashMap<String, String>();		map.put("facebookid", facebookid);		map.put("sendfacebookid", myfacebookid);		sendRqeust(map, "friendprofile", callBack);	}//    var facebookid = rep.body.facebookid;//	var sendfacebookid = req.body.sendfacebookid;//		public static void getMatchProfile(String facebookid, String myfacebookid, ResultCallBack callBack){	public static void getMatchProfile(String facebookid, String myfacebookid, ResultCallBack callBack){		HashMap<String, String> map = new HashMap<String, String>();		map.put("facebookid", facebookid);		map.put("sendfacebookid", myfacebookid);		sendRqeust(map, "matchprofile", callBack);	}//	var facebookid = req.body.facebookid;//	var sendfacebookid = req.body.sendfacebookid;//	ServerManager.getNonProfile(facebookid, myfacebookid, new ResultCallBack() {	public static void getNonProfile(String facebookid, String myfacebookid, ResultCallBack callBack){		HashMap<String, String> map = new HashMap<String, String>();		map.put("facebookid", facebookid);		map.put("sendfacebookid", myfacebookid);		sendRqeust(map, "profile", callBack);}	public static void getMyProfile(String facebookid, ResultCallBack callBack){		HashMap<String, String> map = new HashMap<String, String>();		map.put("facebookid", facebookid);		sendRqeust(map, "myprofile", callBack);	}	//        ServerManager.getMatch(facebookid, new ResultCallBack(){//	var facebookid = req.body.facebookid;	public static void getMatch(String facebookid, ResultCallBack callBack){		HashMap<String, String> map = new HashMap<String, String>();		map.put("facebookid", facebookid);		sendRqeust(map, "getmatch", callBack);	}//        ServerManager.getFriend(facebookid, new ResultCallBack(){	public static void getFriend(String facebookid, ResultCallBack callBack){		HashMap<String, String> map = new HashMap<String, String>();		map.put("facebookid", facebookid);		sendRqeust(map, "getfriend", callBack);	}//    ServerManager.getPersonData(herfacebookid, new ResultCallBack(){//    var facebookid = req.body.facebookid;	public static void getPersonInfo(String facebookid, ResultCallBack callBack){		HashMap<String, String> map = new HashMap<String, String>();		map.put("facebookid", facebookid);		sendRqeust(map, "personinfo", callBack);	}	public static  void getProfile(String myfacebookid, ResultCallBack callBack){		HashMap<String, String> map = new HashMap<String, String>();		map.put("facebookid", myfacebookid);		sendRqeust(map, "profile", callBack);	}	// send add friend notifications	public static void sendAddMatchRequset(String myfacebookid,String matchfacebookid, String request,String myname,String othername, ResultCallBack callBack){		HashMap<String, String> map = new HashMap<String, String>();		map.put("sendfacebookid", myfacebookid);		map.put("facebookid", matchfacebookid);		map.put("request", request);		map.put("sender_name", myname);		map.put("name1", othername);		sendRqeust(map, "addfriend", callBack);	}	// send new feed to server.	public static  void sendNewFeed(String facebookid,String photopath, String group, String aboutphoto, String rate, String myname, ResultCallBack callBack){		HashMap<String, String> map = new HashMap<String, String>();		map.put("photopath", photopath);		map.put("facebookid", facebookid);		map.put("group",group);		map.put("aboutphoto",aboutphoto);		map.put("rate",rate);		map.put("sender_name",myname);		sendRqeust(map, "newfeed", callBack);	}	// deletefriend from friend table	public static void deletefriend(String facebookid, String myfacebookid, ResultCallBack callBack){		HashMap<String, String> map = new HashMap<String,String>();		map.put("facebookid", facebookid);		map.put("sendfacebookid",myfacebookid);		sendRqeust(map, "deletefriend", callBack);	}	// alarm server that i read this notification.	public static void  readNotification(String sender, String destination, String notekind, String feedval, ResultCallBack callBack){		HashMap<String, String> map = new HashMap<String,String>();		map.put("sender", sender);		map.put("destination",destination);		map.put("notekind", notekind);		map.put("feedval",feedval);		sendRqeust(map, "readnotification", callBack);	}	//        ServerManager.getNotificationSize(facebookid, new ResultCallBack() {	public static void getNotificationSize(String facebookid, ResultCallBack callBack){		HashMap<String, String> map = new HashMap<String,String>();		map.put("facebookid", facebookid);		sendRqeust(map, "getnotificationsize", callBack);	}// find users by name.	public static void findbyname(String username, ResultCallBack callBack){		HashMap<String, String> map = new HashMap<String,String>();		map.put("username", username);		sendRqeust(map, "findbyname", callBack);	}	//getnotification	public static void getnotification(String myfacebookid, ResultCallBack callBack){		HashMap<String, String> map = new HashMap<String,String>();		map.put("facebookid", myfacebookid);		sendRqeust(map, "getnotification", callBack);	}//                ServerManager.block(myfacebookid, blockfacebookid, report, new ResultCallBack(){//	var facebookid = req.body.facebookid;//	var blockfacebookid = req.body.blockfacebookid;//	var blocksort = req.body.blocksort;	public static void blockmatch(String myfacebookid, String blockfacebookid, String report, ResultCallBack callBack){		HashMap<String, String> map = new HashMap<String,String>();		map.put("facebookid", myfacebookid);		map.put("blockfacebookid",blockfacebookid);		map.put("blocksort",report);		sendRqeust(map, "blockmatch", callBack);	}//  ServerManager.checkblock(myfacebookid, matchfaceboolid, new ResultCallBack(){//	var facebookid = req.body.facebookid;//	var blockfacebookid = req.body.blockfacebookid;	public static void checkblock(String myfacebookid, String blockfacebookid,ResultCallBack callBack){		HashMap<String, String> map = new HashMap<String,String>();		map.put("facebookid", myfacebookid);		map.put("blockfacebookid",blockfacebookid);		sendRqeust(map, "checkblock", callBack);	}	public static void gettotalrate(String myfacebookid,ResultCallBack callBack){		HashMap<String, String> map = new HashMap<String,String>();		map.put("facebookid", myfacebookid);		sendRqeust(map, "gettotalrate", callBack);	}	public static void changePassword(String userid, String oldpwd, String newpwd, ResultCallBack callback)	{		HashMap<String, String> map = new HashMap<String, String>();		map.put("id", userid);		map.put("password", oldpwd);		map.put("newpass", newpwd);		sendRqeust(map, "changePassword", callback);	}	public static void getVerifyCode(String email, ResultCallBack callback)	{		HashMap<String, String> map = new HashMap<String, String>();		map.put("email", email);		sendRqeust(map, "getverify", callback);	}	public static void forgotPassword(String email, String vcode, String newpwd, ResultCallBack callback)	{		HashMap<String, String> map = new HashMap<String, String>();		map.put("email", email);		map.put("newpwd", newpwd);		map.put("vcode", vcode);		sendRqeust(map, "forgotpassword", callback);	}	public static void updateProfile(String userno, String username, String email, String addr, ResultCallBack callback)	{		HashMap<String, String> map = new HashMap<String, String>();		map.put("userno", userno);		map.put("username", username);		map.put("email", email);		map.put("addr", addr);		sendRqeust(map, "update", callback);	}	public static void getCategoryList(ResultCallBack callback)	{		HashMap<String, String> map = new HashMap<String, String>();		sendRqeust(map, "getCategoryList", callback);	}	public static void getChatUserList(String id, ResultCallBack callback)	{		HashMap<String, String> map = new HashMap<String, String>();		map.put("id", id);		sendRqeust(map, "getChatUserList", callback);	}	public static void getChatHistory(String id, String firstid, String from_id, String to_id, ResultCallBack callback)	{		HashMap<String, String> map = new HashMap<String, String>();		map.put("id", id);		map.put("firstid", firstid);		map.put("from_id", from_id);		map.put("to_id", to_id);		sendRqeust(map, "getChatHistory", callback);	}	public static void getShopList(int categoryID, ResultCallBack callback)	{		HashMap<String, String> map = new HashMap<String, String>();		map.put("category_id", categoryID + "");		sendRqeust(map, "getShopList", callback);	}	public static void getProductList(int shopID, ResultCallBack callback)	{		HashMap<String, String> map = new HashMap<String, String>();		map.put("shop_id", shopID + "");		sendRqeust(map, "getProductList", callback);	}	public static void getCommentList(String id, String product_id, ResultCallBack callback)	{		HashMap<String, String> map = new HashMap<String, String>();		map.put("id", id);		map.put("product_id", product_id);		sendRqeust(map, "getCommentList", callback);	}	public static void addChat(String id, String from_id, String to_id, String product_id, String body, ResultCallBack callback)	{		HashMap<String, String> map = new HashMap<String, String>();		map.put("id", id);		map.put("from_id", from_id);		map.put("to_id", to_id);		map.put("product_id", product_id);		map.put("body", body);		sendRqeust(map, "addChat", callback);	}	public static void addComment(String id, String product_id, ResultCallBack callback, String desc)	{		HashMap<String, String> map = new HashMap<String, String>();		map.put("id", id);		map.put("product_id", product_id);		map.put("desc", desc);		sendRqeust(map, "addComment", callback);	}	public static void rateShop(String userid, String shopid, ResultCallBack callback)	{		HashMap<String, String> map = new HashMap<String, String>();		map.put("id", userid);		map.put("shop_id", shopid);		sendRqeust(map, "rateShop", callback);	}	public static void rateProduct(String userid, String productid, ResultCallBack callback)	{		HashMap<String, String> map = new HashMap<String, String>();		map.put("id", userid);		map.put("product_id", productid);		sendRqeust(map, "rateProduct", callback);	}	public static void getCommnetList(String userid, String productid, ResultCallBack callback)	{		HashMap<String, String> map = new HashMap<String, String>();		map.put("id", userid);		map.put("product_id", productid);		sendRqeust(map, "getCommentList", callback);	}	public static void getOwnProductList(String userID, ResultCallBack callback)	{		HashMap<String, String> map = new HashMap<String, String>();		map.put("id", userID);		sendRqeust(map, "getOwnProductList", callback);	}	public static void getRentShopList(String userID, ResultCallBack callback)	{		HashMap<String, String> map = new HashMap<String, String>();		map.put("id", userID);		sendRqeust(map, "getRentShopList", callback);	}	public static void updateProduct(String userID, String title, String shopID, String price, String desc, String product_id, String thumbnail, ResultCallBack callback)	{		HashMap<String, String> map = new HashMap<String, String>();		map.put("id", userID);		map.put("title", title);		map.put("shop_id", shopID);		map.put("price", price);		map.put("desc", desc);		map.put("product_id", product_id);		map.put("thumbnail", thumbnail);		sendRqeust(map, "updateProduct", callback);	}	public static void addProduct(String userID, String title, String shopID, String price, String desc, String thumbnail, ResultCallBack callback)	{		HashMap<String, String> map = new HashMap<String, String>();		map.put("id", userID);		map.put("title", title);		map.put("shop_id", shopID);		map.put("price", price);		map.put("desc", desc);		map.put("thumbnail", thumbnail);		sendRqeust(map, "addProduct", callback);	}	public static  void uploadPicture(String userid, String token , String path, String userAddress, String comment, ResultCallBack callBack) {		HashMap<String, String> map = new HashMap<String, String>();		map.put("userno", userid);		map.put("token",token);		map.put("userplace", userAddress);		map.put("usercomment",comment);		map.put("images", path);		UpLoadFileTask task = new UpLoadFileTask(ServerTask.SERVER_UPLOAD_PHOTO_PATH, map, null,"images", callBack);		try {			if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {//HONEYCOMB				task.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, path);			} else {				task.execute(path);			}		} catch (RejectedExecutionException e) {			// This shouldn't happen, but might.		}	}	public static void getGroupUser(String userno, String token, ResultCallBack callBack){		HashMap<String, String> map = new HashMap<String, String>();		map.put("userno",userno);		map.put("token",token);		sendRqeust(map, "getdetailgroup", callBack);	}	public static void getAllUsers(String userno, String token, String pageno,ResultCallBack callBack){		HashMap<String, String> map = new HashMap<String, String>();		map.put("userno", userno);		map.put("token", token);		map.put("pagenum",pageno);		sendRqeust(map,"getusers",callBack);	}	public static void addGroup(String userno, String token, String groupName, ResultCallBack callBack){		HashMap<String, String> map = new HashMap<String, String>();		map.put("userno", userno);		map.put("token", token);		map.put("groupname",groupName);		sendRqeust(map,"addgroup",callBack);	}	public static void getGroup(String userno, String token, ResultCallBack callBack){		HashMap<String, String> map = new HashMap<String, String>();		map.put("userno", userno);		map.put("token",token);		sendRqeust(map,"getgroup",callBack);	}	public static void addDetailGroup(String userno,String  token, String username, String groupno,									  String groupnamee, ResultCallBack callBack){		HashMap<String,String> map = new HashMap<String , String>();		map.put("userno",userno);		map.put("token",token);		map.put("username",username);		map.put("groupno", groupno);		map.put("groupname", groupnamee);		sendRqeust(map,"adddetailgroup",callBack);	}	public static  void uploadThumbnail(String path, String userno, ResultCallBack callBack) {//		HashMap<String, String> map = new HashMap<String, String>();////		map.put("userno", userno);////		// add security key//		map.put(ServerTask.SECURITY_KEY, DataUtils.getPreference(ServerTask.SECURITY_KEY, ""));////		UpLoadFileTask task = new UpLoadFileTask(ServerTask.SERVER_URL + "stagethumb", map, null, callBack);//		task.execute(path);	}	public static void getAllUserInfo(String userID, ResultCallBack callback)	{		HashMap<String, String> map = new HashMap<String, String>();		map.put("userid", userID);		sendRqeust(map, COMMAND_GET_USERINFO_ACTION, callback);	}	public static void getStaticList(ResultCallBack callback)	{		HashMap<String, String> map = new HashMap<String, String>();		map.put(ServerTask.OFFLINE_REQUEST_KEY, "1");		sendRqeust(map, COMMAND_GET_STATICLIST_ACTION, callback);	}}